# TODO: figure out if prefix can be removed and all keybindings can be done
# without any prefix and just lean on control modifier for everything
# Set the prefix to ^A.
unbind C-b
set -g prefix ^A
bind a send-prefix

# example how i can run sessionizer with a specific folder selected to hotkey right into the space
# bind-key -r G run-shell "~/.local/bin/tmux-sessionizer ~/folder/selected"

# for ture color and 257 color mode support
# set -g default-terminal "screen-256color"
# set-option -ga terminal-overrides ",xterm-256color:Tc"
set -g default-terminal "xterm-256color"
set -ag terminal-overrides ",xterm-256color:RGB"
# increase scrollback lines
set -g history-limit 10000

# set default shell to zsh
set-option -g default-shell /opt/homebrew/bin/zsh

# fix for osx and tmux issue for vim copy/paste
set-option -g default-command "reattach-to-user-namespace -l zsh"

# set escape time
set -sg escape-time 0

# Move selection
# set -g mouse on

# $Id: screen-keys.conf,v 1.7 2010-07-31 11:39:13 nicm Exp $
#


# Custom key bindings
bind-key - choose-window  # display all windows
# Bind appropriate commands similar to screen.
# lockscreen ^X x
unbind ^X
bind ^X lock-server
unbind x
bind x lock-server

# screen ^C c
unbind ^C
bind ^C new-window -c "#{pane_current_path}"
unbind c
bind c new-window -c "#{pane_current_path}"
# automatic window name
set-option -g status-interval 1
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{=-25:pane_current_path}'

# detach ^D d
unbind ^D
bind ^D detach

# displays *
unbind *
bind * list-clients

# next ^@ ^N sp n
unbind ^@
bind ^@ next-window
unbind ^N
bind ^N next-window
unbind " "
bind " " next-window
unbind n
bind n next-window

# prev ^H ^P p ^?
unbind ^H
# bind ^H previous-window
unbind ^P
bind ^P previous-window
unbind p
bind p previous-window
unbind BSpace
bind BSpace previous-window

# title A
unbind ^r
bind ^r command-prompt "rename-window %%"
# default title

set-hook -g window-layout-changed 'set-window -F pane-border-status "#{?#{==:#{window_panes},1},off,top}"'
set -g pane-border-format " #{window_name} #{pane_title} "
# unbind r
# bind r command-prompt "select-pane -T %%"


# windows ^W w
# unbind ^W
# bind ^W list-windows
# unbind w
# bind w list-windows

# quit \
unbind '\'
bind '\' confirm-before "kill-server"

# enable session setting based on folder searching from script
# forget the find window.  That is for chumps
bind-key -r f run-shell "tmux neww ~/.local/scripts/tmux-sessionizer.sh"
bind-key -r g run-shell "tmux neww ~/.local/scripts/tmux-sessionhopper.sh"
# fuzzy search only the active sessions to jump between
# kill all sessions except misc
unbind K
bind K attach -t home \; kill-session -a
unbind k
bind k attach -t home \; kill-session -a

# jump home to home
unbind h
bind h attach -t home
# jump to previous session
unbind b
bind b switch-client -l

# redisplay ^L l
# TODO: fix refresh client onto a new key
# unbind ^L
# bind ^L refresh-client
# unbind l
# bind l refresh-client

# split -v v
unbind s
bind s split-window -c "#{pane_current_path}"
unbind ^S
bind ^S split-window -c "#{pane_current_path}"

unbind v
bind v split-window -h -c "#{pane_current_path}"
unbind ^V
bind ^V split-window -h -c "#{pane_current_path}"

# :kB: focus up
unbind ]
bind ] select-pane -t:.+
unbind ^]
bind ^] select-pane -t:.+
unbind [
bind [ select-pane -t:.-
unbind ^[
bind ^[ select-pane -t:.-
unbind q
bind q kill-pane
unbind ^Q
bind ^Q kill-pane

# " windowlist -b
unbind '"'
bind '"' choose-window

# Bind keys to resize panes
unbind ^H
bind ^H resize-pane -L 10
unbind ^J
bind ^J resize-pane -D 10
unbind ^K
bind ^K resize-pane -U 10
unbind ^L
bind ^L resize-pane -R 10

# ##### VIM Key Bindings ########
# for vim bindings
setw -g mode-keys vi # vim-style movement
# in normal tmux mode
bind Space copy-mode # `tmux prefix + Space` starts copy mode.

# in copy mode…
bind -T copy-mode-vi v send-keys -X begin-selection # `v` begins a selection. (movement keys to select the desired bits)
bind -T copy-mode-vi V send-keys -X rectangle-toggle # `V` changes between line- and columnwise selection
bind -T copy-mode-vi Y send-keys -X copy-end-of-line # ^1

bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel
# copy text with vi selection or mouse selection
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
bind + delete-buffer

# bind key to paste from tmux paste buffer or system clipboard
# TODO: look for a better key for pasting
bind u run-shell -b "tmux set-buffer \"$(pbpaste)\"; tmux paste-buffer"

# package manager
set -g @plugin 'tmux-plugins/tpm'

set -g @plugin 'tmux-plugins/tmux-yank'
# Plugin to restore tmux sessions
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'

unbind r
bind r source-file "~/.tmux.conf"; display-message "~/.tmux.conf reloaded"
# allow-passthrough for kitty terminal control from nvim

set-option -g allow-passthrough on
set -g update-environment 'KITTY_LISTEN_ON'
#######################################################################
# Weather app
set -g @plugin 'aaronpowell/tmux-weather'
set -g @forecast-location Sydney

#######################################################################
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-net-speed'
set -g @plugin 'robhurring/tmux-spotify'
set -g @plugin 'tmux-plugins/tmux-battery'


# tmux-Nova is a theme plugin
set -g @plugin 'o0th/tmux-nova'
set -g @nova-nerdfonts true
set -g @nova-nerdfonts-left 
set -g @nova-nerdfonts-right 

set -g @nova-segment-mode "#{?client_prefix,Ω,ω} #{session_name}"
set -g @nova-segment-mode-colors "#50fa7b #282a36"

set -g @nova-segment-session "#{session_name}"
set -g @nova-segment-session-colors "#50fa7b #282a36"

set -g @nova-segment-whoami "#(whoami)@#h"
set -g @nova-segment-whoami-colors "#50fa7b #282a36"

set -g @nova-pane "#I#{?pane_in_mode,  #{pane_mode},}  #W"
# set -g @nova-pane ""

# set -g @nova-segment-spotify " #{music_status} #{artist}: #{track}"
set -g @nova-segment-spotify " #(/bin/zsh -i -c 'spotify status' | awk '{if(NR>1 && NR!=3)printf t $0} {if(NR>1)t=\" | \"}' | cut -c4- )"
set -g @nova-segment-spotify-colors "#282a36 #f8f8f2"

set -g @cpu_percentage_format "%5.1f%%"
set -g @nova-segment-cpu " #(~/.tmux/plugins/tmux-cpu/scripts/cpu_percentage.sh)"
set -g @nova-segment-cpu-colors "#282a36 #f8f8f2"

set -g @cpu_temp_unit "C"
set -g @cpu_temp_format "%3.0f"
set -g @nova-segment-cpu-temp "#(sh ~/.tmux/plugins/tmux-cpu/scripts/cpu_temp.sh)"
set -g @nova-segment-cpu-temp-colors "#282a36 #f8f8f2"

set -g @ram_percentage_format "%5.1f%%"
set -g @nova-segment-ram "ram #(sh ~/.tmux/plugins/tmux-cpu/scripts/ram_percentage.sh)"
set -g @nova-segment-ram-colors "#282a36 #f8f8f2"

set -g @net_speed_interfaces "en0"
set -g @net_speed_format "↓ %10s - ↑ %10s"
set -g @nova-segment-net "#{net_speed}"
set -g @nova-segment-net-colors "#282a36 #f8f8f2"

set -g @nova-segment-pomodoro "#(pomodoro status --format ' %%c  %%r %%d') "
set -g @nova-segment-pomodoro-colors "#ff5555 #f8f8f2"

set -g @nova-segment-battery "#(sh ~/.scripts/battery.sh)"
set -g @nova-segment-battery-colors "#282a36 #f8f8f2"

set -g @nova-segment-time "#(date +\"%a %r\")"
set -g @nova-segment-time-colors "#282a36 #f8f8f2"

set -g @nova-segment-weather "#(sh ~/.tmux/plugins/tmux-weather/scripts/forecast.sh)"
set -g @nova-segment-weather-colors "#282a36 #f8f8f2"

set -g @nova-rows 1
set -g @nova-segments-0-left "mode"
set -g @nova-segments-0-right "time"
set -g @nova-segments-1-left "spotify"
set -g @nova-segments-1-right "cpu ram battery"

# set -g @nova-segments-0-left "mode session"
# set -g @nova-segments-0-right "session"
# set -g @nova-segments-1-left "time spotify"
# set -g @nova-segments-1-right "weather cpu ram battery"
#######################################################################

# set -g @resurrect-save 'u'
# set -g @resurrect-restore 'o'
run '~/.tmux/plugins/tpm/tpm'
